//------------------Typing Related----------------------
Bool typing=FALSE;
#define TYPING_GUI_WIDTH	GR_WIDTH
#define TYPING_GUI_HEIGHT	(GR_HEIGHT-(8*14))
#define MAX_TYPING_GUI_LINES	(TYPING_GUI_HEIGHT/8)-5
#define MAX_TYPING_GUI_COLUMNS (TYPING_GUI_WIDTH/8)
#define MAX_INPUT_TXT ((TYPING_GUI_WIDTH/8)*MAX_TYPING_GUI_LINES)+1
I64 typing_timer=0,
    me_input_char[MAX_INPUT_TXT],
    input_char_pos=0,
    input_char_column=0,
    input_char_row=0,
    line_amount=0,
    char_amount=0,
    row_column_amount=0,
    type_mode=0;

U0 ResetInputChar()
{
  I64 i;
  input_char_pos=0;
  input_char_row=0;
  input_char_column=0;
  line_amount=0;
  char_amount=1;
  row_column_amount=0;
  for (i=0;i<MAX_INPUT_TXT;i++) {
    me_input_char[i]=0;
  }
}

I64 PowI64(I64 n,I64 p)
{
  I64 i,num=n;
  for (i=0;i<p;i++) {
    num*=n;
  }
  return num;
}

I64 GetMaxSizeOfValueInArray(I64 *arr,I64 max_size)
{
  I64 i;
  for (i=0;i<max_size;i++) {
    if (arr[i]==0) {
      return i;
    }
  }
  return 0;
}


I64 ArrayToInt(I64 *arr,I64 max_size)
{
  I64 i,num=1,size=GetMaxSizeOfValueInArray(arr,max_size);
  for (i=0;i<size;i++) {//(100 = 3
    num+=(arr[i]-'0')*Pow(10,size-i-1);
  }
  if (num<=10) {
    num-=1;
  }
  return num;
}

U8 ArrayToStr(I64 *arr,I64 max_size)
{
  I64 i,size=GetMaxSizeOfValueInArray(arr,max_size);
  U8 *str="";
  for (i=0;i<size;i++) {
    str=MStrPrint("%s%c",str,arr[i]);
  }
  return str;
}

I64 GetTextSize(I64 *arr,U8 *str,I64 max_size)
{
  U8 *brake=MStrPrint("%s%c",str,0);
  I64 i;
  for (i=0;i<max_size;i++) { //All text
    if (brake[i]!=0) {
      arr[i]=brake[i];
      char_amount++;
      if (arr[i]=='\n') {
	line_amount++;
	input_char_row++;
	input_char_column=0;
	row_column_amount=0;
      } else {
	input_char_column++;
        row_column_amount=input_char_column;
      }
    } else {//last char
      return i; //Get Size of string
    }
  }
}
I64 GetCurrentRowColumnNum(I64 pos)
{
  I64 i,cnt=0;
  for (i=pos;i<pos+MAX_TYPING_GUI_COLUMNS;i++) {
    cnt++;
    if (me_input_char[i]=='\n' || me_input_char[i]==0) {
      return cnt-1;
    }
  }
  return cnt;  
}

I64 GetPreviousRowColumnNum(I64 pos)
{
  I64 i,cnt=0,min=pos-MAX_TYPING_GUI_COLUMNS;
  if (min<0) {
    min=0;
  }
  for (i=pos;i>min;i--) {
    cnt++;
    if (me_input_char[i]=='\n') {
      return cnt-2;
    }
  }
  return cnt;
}

U0 NextRowAction()
{
  if (input_char_row<MAX_TYPING_GUI_LINES) {
    input_char_row++;
    input_char_column=0;
  }
}

I64 TypeKey(I64 type,U8 *saved_text,I64 saved_val,I64 val_max)
{
  Bool booler=FALSE;
  I64 key,val,sc,i;
  U8 *str="";
  type_mode=type;
  ResetInputChar;
  if (type==1) {//texto
    input_char_pos=GetTextSize(me_input_char,saved_text,MAX_INPUT_TXT);
    char_amount=input_char_pos;
  }
  while (typing) {
    if (input_char_row<0) {
      input_char_row=0;
    }
    if (me_input_char[0]=='\n') {//Dmg control
      me_input_char[0]=' ';
      input_char_row--;
      line_amount--;
    }
    key=KeyGet(&sc);
    if (key<32 && key!='\n') {
      switch (key) {
        case 0:
	  if (type==1) { //texto only
	    switch (sc.u8[0]) {
	      case SC_CURSOR_UP:
		if (input_char_column>0) {
		  input_char_column=0;
		  input_char_pos-=GetPreviousRowColumnNum(input_char_pos-1)+1;
		} else if (input_char_column==0 && input_char_row>0) {//Go back a row
	          input_char_pos--;
    		  row_column_amount=
		  input_char_column=GetPreviousRowColumnNum(input_char_pos-1)+1;
    		  input_char_row--;
		}
		break;
	      case SC_CURSOR_DOWN:
		if (input_char_column<row_column_amount) {
		  input_char_column=row_column_amount;
		  input_char_pos+=GetCurrentRowColumnNum(input_char_pos);
		} else if (input_char_row<line_amount && input_char_column==row_column_amount) {//Go down a row
		  input_char_pos++;
		  row_column_amount=GetCurrentRowColumnNum(input_char_pos);
    		  input_char_row++;
    		  input_char_column=0;
		}
		break;
	      case SC_CURSOR_LEFT:
	        if (input_char_pos>0) {
	          input_char_pos--;
		  input_char_column--;
		  if (input_char_column<0) {//go back a row
    		    row_column_amount=
		    input_char_column=GetPreviousRowColumnNum(input_char_pos-1)+1;
    		    input_char_row--;
		  }
	        }
	        break;
	      case SC_CURSOR_RIGHT:
	        if (input_char_pos<char_amount) {
		  input_char_pos++;
		  if (me_input_char[input_char_pos-1]=='\n') {//Go down a row
		    row_column_amount=GetCurrentRowColumnNum(input_char_pos);
    		    input_char_row++;
    		    input_char_column=0;
		  } else {
		    input_char_column++;
		  }
	        }
	        break;
	    }
	  }
	  break;
        case CH_BACKSPACE:
	  switch (type) {
	    case 0: //numero
	      if (input_char_pos>0) {
                input_char_pos--;
	        char_amount--;
                me_input_char[input_char_pos]=0; //erase current one
	        for (i=input_char_pos;i<MAX_INPUT_TXT;i++) { //move the rest backwards
                  me_input_char[i]=me_input_char[i+1];
	        }
	      }
	      break;
	    case 1: //Texto
              if (input_char_pos>0) {
	        i=GetPreviousRowColumnNum(input_char_pos-2)+GetCurrentRowColumnNum(input_char_pos);
	        if (input_char_column>0) {
	          input_char_column--;
		  row_column_amount--;
		  booler=TRUE;
	        } else {
                  if (i<MAX_TYPING_GUI_COLUMNS && input_char_row>0) {//move back 1 row when current+prev=mxtypingguicolumns
	            line_amount--;
   	            input_char_row--;
		    row_column_amount=i+1;//GetPreviousRowColumnNum(input_char_pos-2)+1;
		    input_char_column=GetPreviousRowColumnNum(input_char_pos-2)+1;
		    booler=TRUE;
                  }
                }
	        if (booler) {
                  input_char_pos--;
	          char_amount--;
                  me_input_char[input_char_pos]=0; //erase current one
	          for (i=input_char_pos;i<MAX_INPUT_TXT;i++) { //move the rest backwards
                    me_input_char[i]=me_input_char[i+1];
	          }
	        }
              }
	      break;
	  }
	  break;
        case CH_ESC: //Save
        case CH_CTRLY: //Save
	  typing=FALSE;
	  typing_timer=200;
	  switch (type) {
	    case 0://int value
	      val=LimitValue(ArrayToInt(me_input_char,9),0,val_max);
	      return val;
	      break;
	    case 1: //Typing ground text
	      str=ArrayToStr(me_input_char,MAX_INPUT_TXT);
	      return str;
	      break;
	  }
	  break;
        case CH_SHIFT_ESC: //Abort
        case CH_CTRLX: //Abort
	  typing=FALSE;
	  typing_timer=200;
	  switch (type) {
	    case 0://int value
	      return saved_val;
	      break;
	    case 1: //Typing ground text
	      return saved_text;
	      break;
	  }
	  break;
      }
    } else { //Typing
      switch (type) {
        case 0: //Numero
	  if ('0'<=key<='9' && input_char_pos<9) {
	    me_input_char[input_char_pos]=key; 
	    input_char_pos++;	    
	  }
	  break;
	case 1: //Texto
	  if (!(key==36 || key==34 || key==92) && (key==10 || 32<=key<=126) &&
	      char_amount<MAX_INPUT_TXT-1 && row_column_amount<MAX_TYPING_GUI_COLUMNS) {
	    if (key!='\n' && 
		input_char_column<MAX_TYPING_GUI_COLUMNS-1 && 
		row_column_amount<MAX_TYPING_GUI_COLUMNS-1) {//normal
	      booler=TRUE;
              input_char_column++;
	      row_column_amount++;
            } else if (key=='\n' && line_amount<MAX_TYPING_GUI_LINES-1) {//new line
	      booler=TRUE;
	      line_amount++;
    	      input_char_row++;
    	      input_char_column=0;
	      row_column_amount=GetCurrentRowColumnNum(input_char_pos);
	    }
	    if (booler) {
	      for (i=MAX_INPUT_TXT-1;i>input_char_pos;i--) { //push
                me_input_char[i]=me_input_char[i-1];
	      }
	      me_input_char[input_char_pos]=key; 
	      input_char_pos++;
	      char_amount++;
	    }
	  }
	  break;
      }
    }
    booler=FALSE;
    Sleep(1);
  }
}

U0 DrawTypingGUI(CTask *, CDC *dc,I64 typing_gui_x,I64 typing_gui_y,U8 *numero_msg)
{
  U8 *str="";
  I64 i,char_int,print_num,y_pos,x_pos=-1,/*max_y_pos=(TYPING_GUI_HEIGHT-8*5)/8*/;
  switch (type_mode) {
    case 0: //==========numero==========
      dc->color=BLACK;
      GrRect(dc,typing_gui_x,typing_gui_y,(10+9)*8,48);
      dc->color=LTGREEN;
      GrPrint(dc,typing_gui_x,typing_gui_y,"
%s: 

[ESC]       Search
[SHIFT_ESC] Abort",numero_msg);
     //Print numero
      dc->color=CYAN;
      for (i=0;i<MAX_INPUT_TXT;i++) {
        GrPrint(dc,typing_gui_x+(i+9)*8,typing_gui_y+8,"%c",me_input_char[i]);
      }
      break;
    case 1: //==========texto==========
      dc->color=BLACK;
      GrRect(dc,typing_gui_x,typing_gui_y,TYPING_GUI_WIDTH,TYPING_GUI_HEIGHT);
      dc->color=LTBLUE;
     //hide -1 of column
      print_num=input_char_column;
      if (print_num<0) {
	print_num=0;
      }
      char_int=me_input_char[input_char_pos];
     //special characters display
      if (char_int=='\n') {
	str="\\n";
      } else {
	str=MStrPrint("%c",char_int);
      }
     //print
      GrPrint(dc,typing_gui_x,typing_gui_y-4,"
Row:%d Col:%d	Lines:%d/%d	Chars:%d/%d	CharInRow:%d/%d		%s",
  input_char_row,print_num,
  line_amount,MAX_TYPING_GUI_LINES-1,
  char_amount,MAX_INPUT_TXT-1,
  row_column_amount,MAX_TYPING_GUI_COLUMNS,
  str);
      dc->color=LTGREEN;
      GrPrint(dc,typing_gui_x,typing_gui_y+TYPING_GUI_HEIGHT-8*3,"
*[CTRL_Y] Save Text  *[CTRL_X] Abort");
     //blank lines dot
      dc->color=RED;
      for (i=0;i<MAX_TYPING_GUI_LINES;i++) {
        GrRect(dc,typing_gui_x+2,typing_gui_y+18+8*i,2,2);
      }
      x_pos=0;
      y_pos=0;
     //texto
      dc->color=LTCYAN;
      for (i=0;i<char_amount+1;i++) {
        //if (y_pos>max_y_pos) { //Change of page
	//  y_pos-=max_y_pos+1;
	//}
	if (me_input_char[i]=='\n') {
	  if (input_char_pos==i && Blink) {
	    dc->color=WHITE;
  	    GrRect(dc,typing_gui_x+x_pos*8,typing_gui_y+16+8*y_pos,8,8);
	  }
	  dc->color=LTRED;
          GrRect(dc,typing_gui_x+x_pos*8+2,typing_gui_y+16+8*y_pos+2,4,4);
	  y_pos++;
	  x_pos=-1; 
	}
	dc->color=LTCYAN;
	if (input_char_pos==i && Blink) {
	  dc->color=WHITE;
  	  GrRect(dc,typing_gui_x+x_pos*8,typing_gui_y+16+8*y_pos,8,8);
	  dc->color=BLACK;
	} 
        
	if (me_input_char[i]!=' ' && me_input_char[i]!='\n') {
  	  dc->color=LTCYAN;
          GrPrint(dc,typing_gui_x+x_pos*8,typing_gui_y+16+8*y_pos,"%c",me_input_char[i]);
	} else {
	  dc->color=CYAN;
          GrCircle(dc,typing_gui_x+x_pos*8+4,typing_gui_y+16+8*y_pos+4,1);
	}
	x_pos++;
      }
      break;
  }
}
//----------------------------------------------------
