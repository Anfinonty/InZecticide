

//------------------FAT--------------------
U0 DriveFATBlkAlloc(CDrive *drive)
{
	DriveCheck(drive);
	Free(drive->cur_fat_blk);
	drive->cur_fat_blk		= SysMAlloc(BLK_SIZE);
	drive->cur_fat_blk_num	= 0;
	drive->fat_blk_dirty	= 0;
	BlkRead(drive, drive->cur_fat_blk, drive->fat1, 1);
}

U0 DriveFATBlkAlloc(CDrive *drive)
{
	DriveCheck(drive);
	Free(drive->cur_fat_blk);
	drive->cur_fat_blk		= SysMAlloc(BLK_SIZE);
	drive->cur_fat_blk_num	= 0;
	drive->fat_blk_dirty	= 0;
	BlkRead(drive, drive->cur_fat_blk, drive->fat1, 1);
}


U0 FAT32Init(CDrive *drive)
{
	CFAT32Boot br32;
	Bool unlock;

	try
	{
		unlock = DriveLock(drive);
		drive->fs_type = FSt_FAT32;
		BlkRead(drive, &br32, drive->drv_offset, 1);
		drive->file_system_info_sect	= drive->drv_offset + br32.file_system_info_sect;
		drive->fat1						= drive->drv_offset + br32.reserved_sects;
		drive->fat2						= drive->fat1 + br32.sects_per_fat;
		drive->data_area				= drive->fat2 + br32.sects_per_fat - 2 * br32.sects_per_clus; //Starts at Clus 2
		drive->spc						= br32.sects_per_clus;
		drive->root_clus				= br32.root_clus;
		DriveFATBlkAlloc(drive);
		Free(drive->fis);
		drive->fis						= SysMAlloc(BLK_SIZE);
		BlkRead(drive, drive->fis, drive->file_system_info_sect, 1);
		if (unlock)
			DriveUnlock(drive);
	}
	catch
		if (unlock)
			DriveUnlock(drive);
}
//--------------------------------------------
//----------------Drive-----------------------


Bool DriveTypeSet(U8 drv_let, I64 type=FSt_REDSEA)
{//Very dangerous
	I64			 i, j, ext_base, drv_num, offset, cur_type;
	CMasterBoot	 mbr;
	CBlkDev		*bd;

	drv_let = Letter2Letter(drv_let);
	bd = Letter2BlkDev(drv_let);
	drv_num = bd->first_drive_let - 'A';
	switch (bd->type)
	{
		case BDT_ATA:
			offset = 0;
			ext_base = INVALID_CLUS;
			while (TRUE)
			{
				AHCIAtaBlksRead(bd, &mbr, offset, 1);
				j =- 1;
				for (i = 0; i < 4; i++)
				{
					cur_type = mbr.p[i].type;
					if (cur_type)
					{
						if (cur_type == 5 || cur_type == 15)
							j = i;
						else
						{
							if (drv_num + 'A' == drv_let)
							{
								switch (type)
								{
									case FSt_REDSEA:
										mbr.p[i].type = MBR_PT_REDSEA;
										break;

									case FSt_FAT32:
										mbr.p[i].type = MBR_PT_FAT32a;
										break;

									default:
										throw('Drive');
								}
								mbr.p[i].active = 0x80;
								AHCIAtaBlksWrite(bd, &mbr, offset, 1);
								return TRUE;
							}
							drv_num++;
						}
					}
				}
				if (j < 0)
					break;
				if (!mbr.p[j].offset)
					break;
				if (ext_base == INVALID_CLUS)
				{
					offset = mbr.p[j].offset;
					ext_base = offset;
				}
				else
					offset = mbr.p[j].offset+ext_base;
			}
			break;
	}
}

//--------------------------------------------------------
//---------------RedSea from Kernel-----------------------
U0 RedSeaFreeFreeList(CDrive *drive)
{
	CFreeList	*tmpf, *tmpf1;
	Bool		 unlock;
	try
	{
		unlock = DriveLock(drive);
		if (tmpf = drive->next_free)
		{
			while (tmpf != &drive->next_free)
			{
				tmpf1 = tmpf->next;
				Free(tmpf);
				tmpf = tmpf1;
			}
		}
		drive->next_free = NULL;
		if (unlock)
			DriveUnlock(drive);
	}
	catch
		if (unlock)
			DriveUnlock(drive);
}

U0 RedSeaInit(CDrive *drive)
{
	CRedSeaBoot	br;
	Bool		unlock;

	try
	{
		unlock = DriveLock(drive);
		BlkRead(drive, &br, drive->drv_offset, 1);
		if (br.signature != MBR_PT_REDSEA || br.signature2 != 0xAA55)
			throw('Drive');
		drive->fs_type		= FSt_REDSEA;
		RedSeaFreeFreeList(drive);
		drive->spc			= 1;
		drive->size			= br.sects;
		drive->data_area	= drive->drv_offset + br.bitmap_sects;
		drive->root_clus	= br.root_clus;
		drive->fat1	= drive->fat2 = drive->drv_offset + 1;
		DriveFATBlkAlloc(drive);
		if (unlock)
			DriveUnlock(drive);
	}
	catch
		if (unlock)
			DriveUnlock(drive);
}

Bool RedSeaValidate(U8 drv_let)
{
	CDrive		*drive;
	CRedSeaBoot	 br;

	if ((drive = Letter2Drive(drv_let, FALSE)) && drive->fs_type == FSt_REDSEA &&
			BlkRead(drive, &br, drive->drv_offset, 1) && br.signature == MBR_PT_REDSEA && br.signature2 == 0xAA55)
		return TRUE;
	else
		return FALSE;
}


U0 RedSeaFormat(U8 drv_let, Bool quick=TRUE)
{
	U8			*root_dir;
	CDirEntry	*d_native;
	CRedSeaBoot	*br = CAlloc(BLK_SIZE);
	CDrive		*drive = Letter2Drive(drv_let);
	I64			 i, n, root_dir_blks;

	try
	{
		DriveLock(drive);
		DriveTypeSet(drv_let, FSt_FAT32);
		drive->fs_type		= FSt_REDSEA;
		br->signature		= MBR_PT_REDSEA;
		br->signature2		= 0xAA55;
		br->drv_offset		= drive->drv_offset; //For CD/DVD image copy.
		br->sects			= drive->size;
		n = (br->sects + BLK_SIZE << 3 - 1) / BLK_SIZE << 3;
		br->bitmap_sects	= n;
		br->unique_id		= TSCGet^Now()(U64);
		br->root_clus		= 0;

		if (quick)
			i = n + 1;
		else
			i = drive->size;
		BlkWriteZero(drive, drive->drv_offset, i);

		BlkWrite(drive, br, drive->drv_offset, 1);
		RedSeaInit(drive);
		ClusAlloc(drive, 0, 1, FALSE); //Alloc #1

		root_dir_blks = MaxI64(1, drive->bd->init_root_dir_blks);
		br->root_clus = ClusAlloc(drive, 0, root_dir_blks, FALSE);
		BlkWrite(drive, br, drive->drv_offset, 1);
		root_dir = CAlloc(BLK_SIZE * root_dir_blks);

		d_native = root_dir - offset(CDirEntry.start);

		d_native->attr		= RS_ATTR_DIR | RS_ATTR_CONTIGUOUS;
		*d_native->name		= '.';
		d_native->clus		= br->root_clus;
		d_native->size		= BLK_SIZE * root_dir_blks;
		d_native->datetime	= Now;

		d_native(U8 *) += CDIR_SIZE;

		*d_native->name		= '.';
		d_native->name[1]	= '.';
		d_native->attr		= RS_ATTR_DIR | RS_ATTR_CONTIGUOUS;
		d_native->clus		= br->root_clus;
		d_native->datetime	= Now;

		BlkWrite(drive, root_dir, br->root_clus, root_dir_blks);
		RedSeaInit(drive);
		DriveUnlock(drive);
	}
	catch
		DriveUnlock(drive);
	Free(br);
	Free(root_dir);
}
//---------------------------------------------------------------
//---------------------------AHCIAta-----------------------------
Bool AHCIAtaInit(CBlkDev *bd)
{
	Bool			unlock, okay = FALSE;
	CPortCmdHeader *cmd_header;
	I64				i;

	if (!bd->ahci_port)
		return FALSE;

	unlock = BlkDevLock(bd);

	// if we re-init a port, keep memory from leaking.
	if (bd->ahci_port->cmd_list_base)
	{
		for (i = 0; i < blkdev.cmd_slot_count; i++)
		{
			cmd_header = &bd->ahci_port->cmd_list_base(CPortCmdHeader *)[i];
			Free(cmd_header->cmd_table_base);
		}
		Free(bd->ahci_port->cmd_list_base);
		Free(bd->ahci_port->fis_base);
	}

	// try to init the port, catch if fails.
	try
	{
		AHCIPortInit(bd, bd->ahci_port, bd->port_num);

		if (bd->type == BDT_ATAPI)
			okay = AHCIAtapiStartStop(bd, TRUE);
		else
			okay = TRUE;
	}
	catch
	{
		Fs->catch_except = TRUE;
		okay = FALSE;
		ST_WARN_ST "AHCIAtaInit";
	}

	if (unlock)
		BlkDevUnlock(bd);

	return okay;
}


//--------------------------------------------------------------------
//---------------------------Kernel BlkDev-----------------------------

U0 BlkDevLockFwdingSet(CBlkDev *bd)
{  //If two blkdevs on same controller, use just one lock
	CBlkDev	*bd1;
	I64		 i;

	switch (bd->type)
	{
		case BDT_RAM:
			break;

		case BDT_ISO_FILE_READ:
		case BDT_ISO_FILE_WRITE:
			bd->lock_fwding = Letter2BlkDev(*bd->file_disk_name);
			break;

		case BDT_ATA:
		case BDT_ATAPI:
			for (i = 0; i < BLKDEVS_NUM; i++)
			{
				bd1 = &blkdev.blkdevs[i];
				if (bd1->bd_signature == BD_SIGNATURE_VAL && bd != bd1 &&
					(bd1->type == BDT_ATAPI || bd1->type == BDT_ATA) &&
					bd1->port_num == bd->port_num)
				{
					bd->lock_fwding = bd1;
					break;
				}
			}
			break;
	}
}

Bool BlkDevInit(CBlkDev *bd)
{
	CDirEntry	 de;
	U8			 buf[STR_LEN];
	CDrive		*drive = Letter2Drive(bd->first_drive_let);
	Bool		 res   = FALSE;

	if (!LBts(&bd->flags, BDf_INITIALIZED))
	{
		bd->flags |= BDF_INIT_IN_PROGRESS;
		switch (bd->type)
		{
			case BDT_RAM:
				if (!bd->RAM_disk)
				{
					bd->RAM_disk = SysMAlloc((bd->max_blk + 1) << BLK_SIZE_BITS);
					bd->max_blk = MSize(bd->RAM_disk) >> BLK_SIZE_BITS - 1;
				}
				drive->fs_type = FSt_REDSEA;
				drive->size = bd->max_blk + 1 - bd->drv_offset;
				if (RedSeaValidate(bd->first_drive_let))
					RedSeaInit(drive);
				else
					RedSeaFormat(bd->first_drive_let);
				res = TRUE;
				break;

			case BDT_ISO_FILE_READ:
				if (FileFind(bd->file_disk_name, &de, FUF_JUST_FILES))
				{
					bd->max_blk = de.size >> BLK_SIZE_BITS - 1;
					try
						bd->file_disk = FOpen(bd->file_disk_name, "rc", bd->max_blk + 1);
					catch
					{
						if (Fs->except_ch == 'File')
							PrintErr("Not Contiguous.  Move file to filename.ISO.C.\n");
						Fs->catch_except = TRUE;
					}
					if (bd->file_disk)
					{
						drive->fs_type = FSt_REDSEA;
						drive->size = bd->max_blk + 1 - bd->drv_offset;
						if (RedSeaValidate(bd->first_drive_let))
						{
							RedSeaInit(drive);
							res = TRUE;
						}
						else
							PrintErr("Not RedSea\n");
					}
				}
				break;

			case BDT_ISO_FILE_WRITE:
				if (!bd->file_disk_name)
				{
					StrPrint(buf, "%C:/Drive%C.ISO.C", blkdev.boot_drive_let, bd->first_drive_let);
					bd->file_disk_name = SysStrNew(buf);
				}
				if (bd->max_blk < 7)
					bd->max_blk = 7;
				bd->file_disk = FOpen(bd->file_disk_name, "wc", bd->max_blk + 1);
				drive->fs_type = FSt_REDSEA;
				drive->size = bd->max_blk + 1 - bd->drv_offset;
				RedSeaFormat(bd->first_drive_let);
				CallExtStr("CompatibleRedSeaISO9660", bd->file_disk_name, bd->first_drive_let);
				res = TRUE;
				break;

			case BDT_ATA:
				bd->max_reads = 128;
				bd->max_writes = 1;
				res = AHCIAtaInit(bd);
				break;

			case BDT_ATAPI:
//0xFFFF*4 is too big for Terry's taste
				bd->max_reads = 0x800 * 4;
//max of maybe a quarter of disk cache
				if (bd->max_reads > blkdev.cache_size / BLK_SIZE / 4)
					bd->max_reads = blkdev.cache_size / BLK_SIZE / 4 & ~3;
				if (bd->max_reads < 128)
					bd->max_reads = 128;
				bd->max_writes = 0xFFFF * 4;
				if (res = AHCIAtaInit(bd))
					drive->size = bd->max_blk + 1;
				break;
		}
		if (res && bd->flags & BDF_READ_CACHE)
			DiskCacheInvalidate(drive);
		bd->flags &= ~BDF_INIT_IN_PROGRESS;
	}
	else
		res = TRUE;

	return res;
}


I64 BlkDevAdd(CBlkDev *bd, I64 prt_num=I64_MIN, Bool whole_drive, Bool make_free)
{//It will mount just one partition of prt_num>=0.
//When repartitioing whole drive, whole_drive=TRUE.
	I64			 i, j, ext_base, offset, res = 0, num = 0;
	CDrive		*drive;
	CRedSeaBoot	 br;
	CMasterBoot	 mbr;

	bd->bd_signature = BD_SIGNATURE_VAL;
	if (make_free)
		drive = DriveMakeFreeSlot(bd->first_drive_let);
	else
		drive = DriveMakeFreeSlot(DriveNextFreeLet(bd->first_drive_let));
	drive->bd = bd;
	drive->drv_offset = bd->drv_offset;
	drive->size = bd->max_blk + 1 - bd->drv_offset;
	switch (bd->type)
	{
		case BDT_RAM:
		case BDT_ISO_FILE_READ:
		case BDT_ISO_FILE_WRITE:
			drive->drive_signature = DRIVE_SIGNATURE_VAL;
			drive->prt_num = num;
			drive->fs_type = FSt_REDSEA;
//This is to force creation of a RAM
			//drive during boot, so it is probably
			//MAlloced to the same address and can
			//be assumed to be already formatted.
			//If this line is removed, RAM Drives
			//will be alloced on a just-in-time
			//basis.
			if (BlkDevInit(bd))
				res++;
			else
				drive->drive_signature = 0;
			break;

		case BDT_ATA:
			drive->drive_signature = DRIVE_SIGNATURE_VAL; //Temporarily validate
			if (!BlkDevInit(bd))
				drive->drive_signature = 0; //Revoke validation
			else
			{
				drive->drive_signature = 0; //Revoke validation
				if (whole_drive)
				{
					drive->drive_signature = DRIVE_SIGNATURE_VAL;
					drive->prt_num = num;
					res++;
					drive->fs_type = FSt_REDSEA;
					drive->size = bd->max_blk + 1 - bd->drv_offset;
//The following read is a test read.
					//if it hangs, the drive is not supported.
					AHCIAtaBlksRead(bd, &mbr, 0, 1);
					break;
				}
				offset = 0;
				ext_base = INVALID_CLUS;
				while (prt_num < 0 || num <= prt_num)
				{
					AHCIAtaBlksRead(bd, &mbr, offset, 1);
					if (mbr.signature != 0xAA55)
						break;
					j = -1;
					for (i = 0; i < 4 && (prt_num < 0 || num <= prt_num); i++)
					{
						if (mbr.p[i].type)
						{
							if (make_free)
								drive = DriveMakeFreeSlot(bd->first_drive_let + res);
							else
								drive = DriveMakeFreeSlot(DriveNextFreeLet(bd->first_drive_let + res));
							drive->bd			= bd;
							drive->drv_offset	= mbr.p[i].offset + offset;
							drive->size 		= mbr.p[i].size;
							switch (mbr.p[i].type)
							{
								case MBR_PT_REDSEA:
									drive->drive_signature = DRIVE_SIGNATURE_VAL;
									drive->prt_num = num;
									res++;
									drive->fs_type = FSt_REDSEA;
									RedSeaInit(drive);
									break;

								case MBR_PT_FAT32a:
								case MBR_PT_FAT32b:
								case MBR_PT_FAT32c:
								case MBR_PT_FAT32d:
								case MBR_PT_FAT32e:
								case MBR_PT_FAT32f:
									AHCIAtaBlksRead(bd, &br, drive->drv_offset, 1);
									drive->drive_signature = DRIVE_SIGNATURE_VAL;
									drive->prt_num = num;
									res++;
									if (br.signature == MBR_PT_REDSEA)
									{
										drive->fs_type = FSt_REDSEA;
										RedSeaInit(drive);
									}
									else
									{
										drive->fs_type = FSt_FAT32;
										FAT32Init(drive);
									}
									break;

								case MBR_PT_NTFS:
									drive->drive_signature = DRIVE_SIGNATURE_VAL;
									drive->prt_num = num;
									res++;
									drive->fs_type = FSt_NTFS;
									break;

								case MBR_PT_LINUX:
									drive->drive_signature = DRIVE_SIGNATURE_VAL;
									drive->prt_num = num;
									res++;
									drive->fs_type = FSt_LINUX;
									break;

								case MBR_PT_SWAP:
									drive->drive_signature = DRIVE_SIGNATURE_VAL;
									drive->prt_num = num;
									res++;
									drive->fs_type = FSt_SWAP;
									break;

								case 5:
								case 15:
									j = i;
									break;

								default:
									drive->drive_signature = DRIVE_SIGNATURE_VAL;
									drive->prt_num = num;
									res++;
									drive->fs_type = FSt_UNKNOWN;
							}
							num++;
						}
					}
					if (Letter2BlkDevType(bd->first_drive_let + res) != bd->type)
						break;
					if (j < 0)
						break;
					if (!mbr.p[j].offset)
						break;
					if (ext_base == INVALID_CLUS)
					{
						offset = mbr.p[j].offset;
						ext_base = offset;
					}
					else
						offset = mbr.p[j].offset + ext_base;
				}
			}
			break;

		case BDT_ATAPI:
			drive->drive_signature = DRIVE_SIGNATURE_VAL;
			drive->prt_num = num;
			res++;
			drive->fs_type = FSt_ISO9660; //Start with this
			drive->size = 0;
			break;
	}
	if (res)
		BlkDevLockFwdingSet(bd);
	else
		BlkDevDel(bd);

	return res;
}

//------------------------------------------------
//-------------------Main 2---------------------------
U0 CompatibleRedSeaISO9660(U8 *iso_filename,U8 drv_let)
{
  CDrive	*dv=Letter2Drive(drv_let);
  CISOPriDesc *iso_pri=CAlloc(DVD_BLK_SIZE),
	*iso_boot=CAlloc(DVD_BLK_SIZE),
	*iso_sup=CAlloc(DVD_BLK_SIZE),
	*iso_term=CAlloc(DVD_BLK_SIZE);
  I64 iso_size=0,i,j;
  U32 *d;
  CElTorito *et=CAlloc(DVD_BLK_SIZE);
  U8	*zero_buf=CAlloc(DVD_BLK_SIZE);
  CFile *out_file=NULL;

  if (out_file=FOpen(iso_filename,"wc+")) {
    iso_size=FSize(out_file)/DVD_BLK_SIZE;
    for (i=0;i<dv->bd->drv_offset;i+=4)
      FBlkWrite(out_file,zero_buf,i,4);

    iso_pri->type=ISOT_PRI_VOL_DESC;
    StrCopy(iso_pri->id,"CD001");
    iso_pri->version=1;
    FillU16Palindrome(&iso_pri->vol_set_size,1);
    FillU16Palindrome(&iso_pri->vol_seq_num,1);
    FillU16Palindrome(&iso_pri->log_block_size,DVD_BLK_SIZE);
    FillU32Palindrome(&iso_pri->vol_space_size,iso_size);
    FillU32Palindrome(&iso_pri->root_dir_record,dv->root_clus);
    iso_pri->file_structure_version=1;
    StrCopy(iso_pri->publisher_id-4,"TempleOS RedSea"); //$BK,1$Main Change$BK,0$
    MemCopy(iso_sup,iso_pri,DVD_BLK_SIZE);
    iso_sup->type=ISOT_SUPPLEMENTARY_DESC;

    iso_boot->type=ISOT_BOOT_RECORD;
    StrCopy(iso_boot->id,"CD001");
    iso_boot->version=1;
    StrCopy(iso_boot(U8 *)+7,"EL TORITO SPECIFICATION");

    FBlkWrite(out_file,iso_pri,16<<2,4);
    iso_term->type=ISOT_TERMINATOR;
    StrCopy(iso_term->id,"CD001");
    iso_term->version=1;

    d=iso_boot(U8 *)+0x47;
    *d=20<<2>>2;
    FBlkWrite(out_file,iso_boot,17<<2,4);

    FBlkWrite(out_file,iso_sup,18<<2,4);
    FBlkWrite(out_file,iso_term,19<<2,4);

    et->w[0]=1;
    StrCopy(&et->w[2],"TempleOS");
    et->w[15]=0xAA55;
    j=0;
    for (i=0;i<16;i++) //Checksum
      j+=et->w[i];
    et->w[14]=-j;
    et->bootable=0x88;
    et->media_type=0;//0=no emu 2=1.44meg 4=hard drive
    et->sect_count=4;  //5 seems like the limit, 4 is safer
    et->load_rba=20<<2>>2+1;
    FBlkWrite(out_file,et,20<<2,4);
    FClose(out_file);
  }
  Free(zero_buf);
  Free(et);
  Free(iso_pri);
  Free(iso_boot);
  Free(iso_sup);
  Free(iso_term);
}
//------------------------------------------------
//----------------Main----------------------------
I64 CompatibleRedSeaISO(U8 *_iso_filename=NULL,U8 *_src_dir,
	U8 *_stage2_filename=NULL)
{
	I64			 i, res, root_count, root_dir_blks, bitmap_blks, bitmap_blks1;
	CDirEntry	*tmpde;
	U8			 buf[STR_LEN], *iso_filename, *src_dir, *stage2_filename;
	CDrive		*drive = DriveMakeFreeSlot(DriveNextFreeLet('Q')); //First $LK,"BDT_ISO_FILE_WRITE",A="MN:BDT_ISO_FILE_WRITE"$
	CBlkDev		*bd = BlkDevNextFreeSlot(drive->drv_let, BDT_ISO_FILE_WRITE);

	if (!IsDir(_src_dir))
		PrintErr("'%s' is not a dir.\n", _src_dir);
	else
	{
		if (!_iso_filename)
			_iso_filename = blkdev.default_iso_c_filename;

		iso_filename = ExtChange(_iso_filename, "ISO.C");
		src_dir = DirNameAbs(_src_dir);

		if (_stage2_filename)
		{
			stage2_filename = FileNameAbs(_stage2_filename);
			*stage2_filename = drive->drv_let;

			i = StrLen(src_dir);
			if (i != 3) //If not root
				i++;		//Skip slash

			StrCopy(stage2_filename + 3, stage2_filename + i);
		}
		else
			stage2_filename = NULL;

		tmpde = FilesFind(src_dir, FUF_RECURSE);
		root_count = LinkedListCount(tmpde) + 3;
		root_dir_blks = CeilU64(root_count << 6, BLK_SIZE) >> BLK_SIZE_BITS;

		if (res = RedSeaISOPass1(tmpde) >> BLK_SIZE_BITS)
		{
			bd->drv_offset = 19 << 2 + (DVD_BLK_SIZE * 2 + DVD_BOOT_LOADER_SIZE) / BLK_SIZE;
			bitmap_blks = 1;
			do
			{
				bitmap_blks1 = bitmap_blks;
				bitmap_blks  = (res + bitmap_blks + BLK_SIZE << 3 - 1) / BLK_SIZE << 3;
			}
			while (bitmap_blks != bitmap_blks1);

			bd->max_blk				= CeilI64(bd->drv_offset + 1 + bitmap_blks + res, 4);
			bd->max_blk--; //Inclusive.
			bd->file_disk_name		= SysStrNew(iso_filename);
			bd->init_root_dir_blks	= root_dir_blks;
			BlkDevAdd(bd,, TRUE, TRUE);					//$BK,1$Link 1$BK,0$ 
			StrPrint(buf, "%C:/", drive->drv_let);
			CopyTree(src_dir, buf, TRUE);
			RedSeaISO9660Stage1(iso_filename, stage2_filename);
			DriveDel(drive);
			BlkDevDel(bd);
		}
		Free(stage2_filename);
		Free(src_dir);
		Free(iso_filename);
	}
	return res;
}


//-----------------ZealOS Export-------------------------
#define STD_DISTRO_DVD_CONFIG	"TB\nScale2Mem(2048,0x40000)\nT\n\n\n\n"

U0 ExportMap(U8 *_map_name,U8 *saves_name,U8 *extension,Bool msg)
{
  U8 *map_name=FileNameAbs(_map_name);
  /*if (msg) { //If Zeal (Legacy)
    PopUpOk("\n$FG,2$Press [SHIFT_ESC] after 1 second to $FG$Export\n");
  }*/
  if (!DriveIsWritable) {
    "Drive must be writable.  Install on Hard drive, first.\n";
    return;
  }
  Del(map_name);
  In(STD_DISTRO_DVD_CONFIG);
  BootDVDIns;   
  Cd(__DIR__);;
  Cd("..");;
  DirMake("ExportingTmp");
  DirMake("ExportingTmp/Insecticide_Verify");
  DirMake("ExportingTmp/From_Zeal");
  Copy(MStrPrint("ExportTmp/Save/%s.%s",saves_name,extension),
       MStrPrint("ExportingTmp/%s.TXT",saves_name)); //TOS
  DirMake("ExportingTmp/LevelScripts");
  Copy(MStrPrint("ExportTmp/Script/%s.%s",saves_name,extension),
       MStrPrint("ExportingTmp/LevelScripts/%s.TXT",saves_name)); //TOS
  CompatibleRedSeaISO(map_name,"ExportingTmp","ExportingTmp" BOOT_DIR_DVD_KERNEL_ZXE);//Move Tmp to ISO.C
  Free(map_name);
  DelTree("ExportingTmp"); //Delete Tmp
  PopUpOk(MStrPrint("$FG,2$\n\nMap $FG,0$\"%s\"$FG$$FG,2$ $BK,1$Exported$FG$$BK,0$$FG,2$!$FG$\n$FG$\n\n$FG,9$Directory:$FG$$FG,1$ \n%s/Exports/%s.ISO.C$FG$\n\n",saves_name,__DIR__,saves_name));
}
