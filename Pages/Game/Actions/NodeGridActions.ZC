
U0 NodeGridInit()
{
  I64 i=0,x=0,y=0;
  for (i=0;i<MAP_NODE_NUM;i++) {
    NodeGrid[i].node_solid=FALSE;
    NodeGrid[i].x1=x;
    NodeGrid[i].y1=y;
    NodeGrid[i].x2=NodeGrid[i].x1+NODE_SIZE;
    NodeGrid[i].y2=NodeGrid[i].y1+NODE_SIZE;
    x+=NODE_SIZE;
    if (x>MAP_WIDTH-NODE_SIZE) {
      x=0;
      y+=NODE_SIZE;
    }
  }
}

Bool IsCollideSolid(F64 x1,F64 y1,F64 x2,F64 y2,F64 gradient,F64 c)
{
  I64 node_grid_id=0,x=0,y=0,min=0,max=0;
  F64 lg_x,lg_y;
  if (-1<gradient<1) { // y=mx+c
    for (x=x1;x<=x2;x++) {
      lg_y=x*gradient+c;
      node_grid_id=GetGridId(x,lg_y,MAP_WIDTH,NODE_SIZE,MAP_NODE_NUM);
      if (NodeGrid[node_grid_id].node_solid) {
	return TRUE;
      }
    }
  } else { // x=(y-c)/m
    if (y1<y2) {
      min=y1;
      max=y2;
    } else {
      min=y2;
      max=y1;
    }
    for (y=min;y<=max;y++) {
      lg_x=(y-c)/gradient;
      node_grid_id=GetGridId(lg_x,y,MAP_WIDTH,NODE_SIZE,MAP_NODE_NUM);
      if (NodeGrid[node_grid_id].node_solid) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

Bool IsHasNeighbours(I64 nx,I64 ny) 
{
  I64 i=0,node_grid_id=0,x=0,y=0;
  for (i=0;i<8;i++) {
    x=nx;
    y=ny;
    if (i<=2) {
      x-=NODE_SIZE; //case 1: left
      switch (i) {
        case 0:
	  y-=NODE_SIZE;
          break;
        case 2:
	  y+=NODE_SIZE;
          break;
      }
    } else if (3<=i<=5) {
      x+=NODE_SIZE; // case 4: right
      switch (i) {
        case 3:
          y-=NODE_SIZE;
          break;
        case 5:
          y+=NODE_SIZE;
          break;
      }
    } else {
      switch (i) {
        case 6: //above
          y-=NODE_SIZE;
          break;
        case 7: //below
          y+=NODE_SIZE;
          break;
      }
    }
    if (0<x<MAP_WIDTH && 0<y<MAP_HEIGHT) {
      node_grid_id=GetGridId(x,y,MAP_WIDTH,NODE_SIZE,MAP_NODE_NUM);
      if (NodeGrid[node_grid_id].node_solid) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

U0 SetNodeGridAttributes2(I64 i)
{
  I64 j=0,x=0,y=0,lg_grid_id=0;
  F64 gradient[2],c[2],
      min=0,max=0,x1=0,y1=0,lg_x=0,lg_y=0;
  gradient[0]=GetGradient(Ground[i].x1,Ground[i].y1,Ground[i].x3,Ground[i].y3);
  gradient[1]=GetGradient(Ground[i].x2,Ground[i].y2,Ground[i].x3,Ground[i].y3);
  c[0]=GetGroundC(Ground[i].x3,Ground[i].y3,gradient[0]);
  c[1]=GetGroundC(Ground[i].x3,Ground[i].y3,gradient[1]);
  for (j=0;j<2;j++) {
    switch (j) {
      case 0:
	x1=Ground[i].x1;
	y1=Ground[i].y1;
	break;
      case 1:
	x1=Ground[i].x2;
	y1=Ground[i].y2;
	break;
    }
    if (-1<gradient[i] && gradient[i]<1) {//y=mx+c
      if (x1<Ground[i].x3) { //x1 is lower than x3
	min=x1;
	max=Ground[i].x3;
      } else {
	min=Ground[i].x3;
	max=x1;
      }
      for (x=min;x<max;x++) {
        lg_y=x*gradient[j]+c[j];
        lg_grid_id=GetGridId(x,lg_y,MAP_WIDTH,GRID_SIZE,GRID_NUM);
        SetGridLineArray(lg_grid_id,i);
      }
    } else {// x=(y-c)/m
      if (y1<Ground[i].y3) { //y1 is lower than x3
	min=y1;
	max=Ground[i].y3;
      } else {
	min=Ground[i].y3;
	max=y1;
      }
      for (y=min;y<max;y++) {
        lg_x=(y-c[j])/gradient[j];
        lg_grid_id=GetGridId(lg_x,y,MAP_WIDTH,GRID_SIZE,GRID_NUM);
        SetGridLineArray(lg_grid_id,i);
      }
    }
  }
}



U0 SetNodeGridAttributes(I64 i)
{
  I64 lg_grid_id=0,node_grid_id=0,x=0,y=0,min=0,max=0;
  F64 lg_x=0,lg_y=0;
  if (-1<Ground[i].gradient && Ground[i].gradient<1) { // y=mx+c
    for (x=Ground[i].x1;x<Ground[i].x2;x++) {
      lg_y=x*Ground[i].gradient+Ground[i].c;
      lg_grid_id=GetGridId(x,lg_y,MAP_WIDTH,GRID_SIZE,GRID_NUM);
      SetGridLineArray(lg_grid_id,i);
      if (!Ground[i].is_ghost) { //Not a ghost
        node_grid_id=GetGridId(x,lg_y,MAP_WIDTH,NODE_SIZE,MAP_NODE_NUM);
        NodeGrid[node_grid_id].node_solid=TRUE;
      }
    }
  } else { // x=(y-c)/m
    if (Ground[i].y1<Ground[i].y2) {
      min=Ground[i].y1;
      max=Ground[i].y2;
    } else {
      min=Ground[i].y2;
      max=Ground[i].y1;
    }
    for (y=min;y<max;y++) {
      lg_x=(y-Ground[i].c)/Ground[i].gradient;
      lg_grid_id=GetGridId(lg_x,y,MAP_WIDTH,GRID_SIZE,GRID_NUM);
      SetGridLineArray(lg_grid_id,i);
      if (!Ground[i].is_ghost) {
        node_grid_id=GetGridId(lg_x,y,MAP_WIDTH,NODE_SIZE,MAP_NODE_NUM);
        NodeGrid[node_grid_id].node_solid=TRUE;
      }
    }
  }
  if (Ground[i].type==3) {//triangle
    SetNodeGridAttributes2(i);
  }
}

U0 NodeGridAttributesInit()
{
  I64 i=0;
  for (i=0;i<GROUND_NUM;i++) {
    SetNodeGridAttributes(i);
  }
}