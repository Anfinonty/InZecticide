
I64 GetGridId(I64 x,I64 y,I64 width, I64 size,I64 max)
{
  I64 id=-1,row=0,column=0;
  row=y/size;
  column=x/size;
  id=row*(width/size)+column;
  if (-1<id<max && 0<x<width) {
    return id;
  }
  return -1;
}

U0 SetGridLineArray(I64 grid_id,I64 ground_id)
{
  if (!Ground[ground_id].already_in_grid[grid_id] &&  
      Grid[grid_id].max_ground_num<MAX_GROUNDS_WITHIN_GRID) {//if not in the grid
    //Ground related
    Ground[ground_id].saved_pos_in_grid[grid_id]=Grid[grid_id].max_ground_num;
    Ground[ground_id].already_in_grid[grid_id]=TRUE;
    //grid related
    Grid[grid_id].ground_ids[Grid[grid_id].max_ground_num]=ground_id;
    Grid[grid_id].max_ground_num++;
  }
}

U0 UnSetGridLineArray(I64 grid_id,I64 ground_id)
{
  I64 i=0;
  if (Ground[ground_id].already_in_grid[grid_id]) {
   //grid related
    for (i=Ground[ground_id].saved_pos_in_grid[grid_id];i<Grid[grid_id].max_ground_num-1;i++) {
      Grid[grid_id].ground_ids[i]=Grid[grid_id].ground_ids[i+1];
      Ground[Grid[grid_id].ground_ids[i]].saved_pos_in_grid[grid_id]--;
    }
    Grid[grid_id].ground_ids[Grid[grid_id].max_ground_num-1]=-1;
    Grid[grid_id].max_ground_num--;
   //ground related
    Ground[ground_id].already_in_grid[grid_id]=FALSE;
    Ground[ground_id].saved_pos_in_grid[grid_id]=-1;
  }
}

U0 GridInit() 
{
  I64 i=0,j=0,x=0,y=0;
  for (i=0;i<GRID_NUM;i++) {
    Grid[i].within_render_distance=FALSE;
    Grid[i].max_ground_num=0;
    for (j=0;j<MAX_GROUNDS_WITHIN_GRID;j++) {
      Grid[i].ground_ids[j]=-1;
    }
    Grid[i].enemy_occupy_num=0;
    for (j=0;j<ENEMY_NUM;j++) {
      Grid[i].enemy_occupy[j]=-1;
    }
    Grid[i].x1=x;
    Grid[i].y1=y;
    Grid[i].x2=Grid[i].x1+GRID_SIZE;
    Grid[i].y2=Grid[i].y1+GRID_SIZE;
    x+=GRID_SIZE;
    if (x>MAP_WIDTH-GRID_SIZE) {
      x=0;
      y+=GRID_SIZE;
    }
  }
}

Bool IsCollideCrawler(F64 x1,F64 y1,F64 x2,F64 y2,F64 gradient,F64 c)
{
  I64 on_grid_id=0,i=0,enemy_id=0,x=0,y=0,min=0,max=0;
  F64 lg_x=0,lg_y=0;
  if (x1!=x2) {
    if (-1<gradient<1) { // y=mx+c
      for (x=x1;x<=x2;x++) {
        lg_y=x*gradient+c;
        on_grid_id=GetGridId(x,lg_y,MAP_WIDTH,GRID_SIZE,GRID_NUM);
        for (i=0;i<Grid[on_grid_id].enemy_occupy_num;i++) {
	  enemy_id=Grid[on_grid_id].enemy_occupy[i];
          if (Enemy[enemy_id].species==1 && Enemy[enemy_id].health>0) {
	    if (GetDistance(x,lg_y,Enemy[enemy_id].x,Enemy[enemy_id].y)<=NODE_SIZE*2) {
	      return TRUE;
	    }
          }
        }
      }
    } else { // x=(y-c)/m
      if (y1<y2) {
        min=y1;
        max=y2;
      } else {
        min=y2;
        max=y1;
      }
      for (y=min;y<=max;y++) {
        lg_x=(y-c)/gradient;
        on_grid_id=GetGridId(lg_x,y,MAP_WIDTH,GRID_SIZE,GRID_NUM);
        for (i=0;i<Grid[on_grid_id].enemy_occupy_num;i++) {
	  enemy_id=Grid[on_grid_id].enemy_occupy[i];
          if (Enemy[enemy_id].species==1 && Enemy[enemy_id].health>0) {
	    if (GetDistance(lg_x,y,Enemy[enemy_id].x,Enemy[enemy_id].y)<=NODE_SIZE*2) {
	      return TRUE;
	    }
          }
        }
      }
    }
  } else {
    return TRUE;
  }
  return FALSE;
}


U0 DrawGrid(CTask *,CDC *dc)
{
  I64 i=0,j=0;
  F64 é1=0,
      é2=0,
      é3=0,
      é4=0,
      grid_é_x1=0,
      grid_é_y1=0,
      grid_é_x2=0,
      grid_é_y2=0,
      grid_é_x3=0,
      grid_é_y3=0,
      grid_é_x4=0,
      grid_é_y4=0;
  for (j=0;j<rendered_grid_num;j++) {
    i=render_grids[j];
    dc->color=LTGRAY;
    if (!change_view || (on_ground_timer<=0)) { //normal view
      GrLine(dc,Grid[i].x1+cam_x-PLAYER_WIDTH/2,Grid[i].y1+cam_y-PLAYER_HEIGHT/2,Grid[i].x2+cam_x-PLAYER_WIDTH/2,Grid[i].y1+cam_y-PLAYER_HEIGHT/2);
      GrLine(dc,Grid[i].x1+cam_x-PLAYER_WIDTH/2,Grid[i].y1+cam_y-PLAYER_HEIGHT/2,Grid[i].x1+cam_x-PLAYER_WIDTH/2,Grid[i].y2+cam_y-PLAYER_HEIGHT/2);
      GrLine(dc,Grid[i].x2+cam_x-PLAYER_WIDTH/2,Grid[i].y1+cam_y-PLAYER_HEIGHT/2,Grid[i].x2+cam_x-PLAYER_WIDTH/2,Grid[i].y2+cam_y-PLAYER_HEIGHT/2);
      GrLine(dc,Grid[i].x1+cam_x-PLAYER_WIDTH/2,Grid[i].y2+cam_y-PLAYER_HEIGHT/2,Grid[i].x2+cam_x-PLAYER_WIDTH/2,Grid[i].y2+cam_y-PLAYER_HEIGHT/2);   
    } else {
      é1=GetRotateAngle(Grid[i].x1,Grid[i].y1);
      é2=GetRotateAngle(Grid[i].x2,Grid[i].y1);
      é3=GetRotateAngle(Grid[i].x1,Grid[i].y2);
      é4=GetRotateAngle(Grid[i].x2,Grid[i].y2);
      if (print_current_above) {
        grid_é_x1=GetDistance(Grid[i].x1,Grid[i].y1,0,0)*Cos(é1-Ground[on_ground_id].angle);
        grid_é_y1=GetDistance(Grid[i].x1,Grid[i].y1,0,0)*Sin(é1-Ground[on_ground_id].angle);
        grid_é_x2=GetDistance(Grid[i].x2,Grid[i].y1,0,0)*Cos(é2-Ground[on_ground_id].angle);
        grid_é_y2=GetDistance(Grid[i].x2,Grid[i].y1,0,0)*Sin(é2-Ground[on_ground_id].angle);
        grid_é_x3=GetDistance(Grid[i].x1,Grid[i].y2,0,0)*Cos(é3-Ground[on_ground_id].angle);
        grid_é_y3=GetDistance(Grid[i].x1,Grid[i].y2,0,0)*Sin(é3-Ground[on_ground_id].angle);
        grid_é_x4=GetDistance(Grid[i].x2,Grid[i].y2,0,0)*Cos(é4-Ground[on_ground_id].angle);
        grid_é_y4=GetDistance(Grid[i].x2,Grid[i].y2,0,0)*Sin(é4-Ground[on_ground_id].angle);
      } else if (print_current_below) {
        grid_é_x1=GetDistance(Grid[i].x1,Grid[i].y1,0,0)*Cos(pi+é1-Ground[on_ground_id].angle);
        grid_é_y1=GetDistance(Grid[i].x1,Grid[i].y1,0,0)*Sin(pi+é1-Ground[on_ground_id].angle);
        grid_é_x2=GetDistance(Grid[i].x2,Grid[i].y1,0,0)*Cos(pi+é2-Ground[on_ground_id].angle);
        grid_é_y2=GetDistance(Grid[i].x2,Grid[i].y1,0,0)*Sin(pi+é2-Ground[on_ground_id].angle);
        grid_é_x3=GetDistance(Grid[i].x1,Grid[i].y2,0,0)*Cos(pi+é3-Ground[on_ground_id].angle);
        grid_é_y3=GetDistance(Grid[i].x1,Grid[i].y2,0,0)*Sin(pi+é3-Ground[on_ground_id].angle);
        grid_é_x4=GetDistance(Grid[i].x2,Grid[i].y2,0,0)*Cos(pi+é4-Ground[on_ground_id].angle);
        grid_é_y4=GetDistance(Grid[i].x2,Grid[i].y2,0,0)*Sin(pi+é4-Ground[on_ground_id].angle);
      } 
      GrLine(dc,GR_WIDTH/2+grid_é_x1-player_é_x,
                GR_HEIGHT/2+grid_é_y1-player_é_y,
                GR_WIDTH/2+grid_é_x2-player_é_x,
                GR_HEIGHT/2+grid_é_y2-player_é_y);
      GrLine(dc,GR_WIDTH/2+grid_é_x3-player_é_x,
                GR_HEIGHT/2+grid_é_y3-player_é_y,
                GR_WIDTH/2+grid_é_x4-player_é_x,
                GR_HEIGHT/2+grid_é_y4-player_é_y);
      GrLine(dc,GR_WIDTH/2+grid_é_x2-player_é_x,
                GR_HEIGHT/2+grid_é_y2-player_é_y,
                GR_WIDTH/2+grid_é_x4-player_é_x,
                GR_HEIGHT/2+grid_é_y4-player_é_y);
      GrLine(dc,GR_WIDTH/2+grid_é_x1-player_é_x,
                GR_HEIGHT/2+grid_é_y1-player_é_y,
                GR_WIDTH/2+grid_é_x3-player_é_x,
                GR_HEIGHT/2+grid_é_y3-player_é_y);
    }
  //Debug
    /*I64 k;
    dc->color=PURPLE;
    for (k=0;k<7;k++) {
      GrPrint(dc,Grid[i].x1+cam_x,Grid[i].y1+cam_y+8*k+8,"%d",Grid[i].ground_ids[k]);
    }*/
  }
}
